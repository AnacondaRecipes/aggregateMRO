{% set version = '1.1-14' %}  # [linux or win32]
{% set version = '1.1-14' %}  # [win64]
{% set version = '1.1-14' %}  # [osx]

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-bit
  version: {{ version|replace("-", "_") }}

source:
  url:  # [linux or win32]
    - {{ cran_mirror }}/src/contrib/bit_{{ version }}.tar.gz  # [linux or win32]
    - {{ cran_mirror }}/src/contrib/Archive/bit/bit_{{ version }}.tar.gz  # [linux or win32]
  sha256: 5cbaace1fb643a665a6ca69b90f7a6d624270de82420ca7a44f306753fcef254  # [linux or win32]

  url: https://cran.microsoft.com/snapshot/2018-08-01/bin/windows/contrib/3.5/bit_1.1-14.zip  # [win64]
  sha256: f51980964862d9385401be247d7bef826d55e4ce3004a20411148c64abb51a93  # [win64]

  url: https://cran.microsoft.com/snapshot/2018-08-01/bin/macosx/el-capitan/contrib/3.5/bit_1.1-14.tgz  # [osx]
  sha256: 8e843862ce1ee0fa688316d0adf5247a69e60d0866a8766eee49f033690e4ff4  # [osx]

build:
  merge_build_host: True  # [win32]
  # If this is a new build for the same version, increment the build number.
  number: 0

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}        # [linux]
    - rtools                     # [win32]
    - {{posix}}zip               # [win32]

  host:
    - mro-base

  run:
    - mro-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('bit')"           # [not win]
    - "\"%R%\" -e \"library('bit')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://ff.r-forge.r-project.org/
  license: GPL-2
  summary: 'True boolean datatype (no NAs),  coercion from and to logicals, integers and integer
    subscripts;  fast boolean operators and fast summary statistics.  With ''bit'' vectors
    you can store true binary booleans {FALSE,TRUE} at the  expense of 1 bit only, on
    a 32 bit architecture this means factor 32 less  RAM and ~ factor 32 more speed
    on boolean operations. Due to overhead of  R calls, actual speed gain depends on
    the size of the vector: expect gains  for vectors of size > 10000 elements. Even
    for one-time boolean operations  it can pay-off to convert to bit, the pay-off is
    obvious, when such  components are used more than once.  Reading from and writing
    to bit is approximately as fast as accessing  standard logicals - mostly due to
    R''s time for memory allocation. The package  allows to work with pre-allocated
    memory for return values by calling .Call()  directly: when evaluating the speed
    of C-access with pre-allocated vector  memory, coping from bit to logical requires
    only 70% of the time for copying  from logical to logical; and copying from logical
    to bit comes at a  performance penalty of 150%. the package now contains further
    classes for  representing logical selections: ''bitwhich'' for very skewed selections
    and  ''ri'' for selecting ranges of values for chunked processing. All three index  classes
    can be used for subsetting ''ff'' objects (ff-2.1-0 and higher).'

  license_family: GPL2

extra:
  recipe-maintainers:
    - mingwandroid

# The original CRAN metadata for this package was:

# Package: bit
# Type: Package
# Title: A Class for Vectors of 1-Bit Booleans
# Version: 1.1-14
# Date: 2018-04-11
# Author: Jens Oehlschlagel <Jens.Oehlschlaegel@truecluster.com>
# Maintainer: Jens Oehlschlagel <Jens.Oehlschlaegel@truecluster.com>
# Depends: R (>= 2.9.2)
# Description: True boolean datatype (no NAs),  coercion from and to logicals, integers and integer subscripts;  fast boolean operators and fast summary statistics.  With 'bit' vectors you can store true binary booleans {FALSE,TRUE} at the  expense of 1 bit only, on a 32 bit architecture this means factor 32 less  RAM and ~ factor 32 more speed on boolean operations. Due to overhead of  R calls, actual speed gain depends on the size of the vector: expect gains  for vectors of size > 10000 elements. Even for one-time boolean operations  it can pay-off to convert to bit, the pay-off is obvious, when such  components are used more than once.  Reading from and writing to bit is approximately as fast as accessing  standard logicals - mostly due to R's time for memory allocation. The package  allows to work with pre-allocated memory for return values by calling .Call()  directly: when evaluating the speed of C-access with pre-allocated vector  memory, coping from bit to logical requires only 70% of the time for copying  from logical to logical; and copying from logical to bit comes at a  performance penalty of 150%. the package now contains further classes for  representing logical selections: 'bitwhich' for very skewed selections and  'ri' for selecting ranges of values for chunked processing. All three index  classes can be used for subsetting 'ff' objects (ff-2.1-0 and higher).
# License: GPL-2
# LazyLoad: yes
# ByteCompile: yes
# Encoding: UTF-8
# URL: http://ff.r-forge.r-project.org/
# NeedsCompilation: yes
# Packaged: 2018-05-27 20:28:22 UTC; jens
# Repository: CRAN
# Date/Publication: 2018-05-29 16:56:33 UTC

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
